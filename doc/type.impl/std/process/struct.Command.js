(function() {
    var type_impls = Object.fromEntries([["redoxr",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CommandExt-for-Command\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/linux/process.rs.html#210\">Source</a><a href=\"#impl-CommandExt-for-Command\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/os/linux/process/trait.CommandExt.html\" title=\"trait std::os::linux::process::CommandExt\">CommandExt</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_pidfd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/linux/process.rs.html#211\">Source</a><a href=\"#method.create_pidfd\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/linux/process/trait.CommandExt.html#tymethod.create_pidfd\" class=\"fn\">create_pidfd</a>(&amp;mut self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>linux_pidfd</code>)</span></div></span><div class='docblock'>Sets whether a <a href=\"https://doc.rust-lang.org/1.87.0/std/os/linux/process/struct.PidFd.html\" title=\"struct std::os::linux::process::PidFd\"><code>PidFd</code></a> should be created for the <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Child.html\" title=\"struct std::process::Child\"><code>Child</code></a>\nspawned by this <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\"><code>Command</code></a>.\nBy default, no pidfd will be created. <a href=\"https://doc.rust-lang.org/1.87.0/std/os/linux/process/trait.CommandExt.html#tymethod.create_pidfd\">Read more</a></div></details></div></details>","CommandExt","redoxr::redoxr::Cmd"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CommandExt-for-Command\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#203\">Source</a></span><a href=\"#impl-CommandExt-for-Command\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html\" title=\"trait std::os::unix::process::CommandExt\">CommandExt</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.uid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#204\">Source</a><a href=\"#method.uid\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.uid\" class=\"fn\">uid</a>(&amp;mut self, id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class='docblock'>Sets the child processâ€™s user ID. This translates to a\n<code>setuid</code> call in the child process. Failure in the <code>setuid</code>\ncall will cause the spawn to fail. <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.uid\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#209\">Source</a><a href=\"#method.gid\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.gid\" class=\"fn\">gid</a>(&amp;mut self, id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class='docblock'>Similar to <code>uid</code>, but sets the group ID of the child process. This has\nthe same semantics as the <code>uid</code> field.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.groups\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#214\">Source</a><a href=\"#method.groups\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.groups\" class=\"fn\">groups</a>(&amp;mut self, groups: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>]) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>setgroups</code>)</span></div></span><div class='docblock'>Sets the supplementary group IDs for the calling process. Translates to\na <code>setgroups</code> call in the child process.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_exec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#219-221\">Source</a><a href=\"#method.pre_exec\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.pre_exec\" class=\"fn\">pre_exec</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class='docblock'>Schedules a closure to be run just before the <code>exec</code> function is\ninvoked. <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.pre_exec\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#227\">Source</a><a href=\"#method.exec\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.exec\" class=\"fn\">exec</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Performs all the required setup by this <code>Command</code>, followed by calling\nthe <code>execvp</code> syscall. <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.exec\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arg0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#233-235\">Source</a><a href=\"#method.arg0\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.arg0\" class=\"fn\">arg0</a>&lt;S&gt;(&amp;mut self, arg: S) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class='docblock'>Set executable argument <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.arg0\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.process_group\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#241\">Source</a><a href=\"#method.process_group\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.process_group\" class=\"fn\">process_group</a>(&amp;mut self, pgroup: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.i32.html\">i32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class='docblock'>Sets the process group ID (PGID) of the child process. Equivalent to a\n<code>setpgid</code> call in the child process, but may be more efficient. <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#tymethod.process_group\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before_exec\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/os/unix/process.rs.html#122-124\">Source</a></span><a href=\"#method.before_exec\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#method.before_exec\" class=\"fn\">before_exec</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.37.0: should be unsafe, use <code>pre_exec</code> instead</span></div></span><div class='docblock'>Schedules a closure to be run just before the <code>exec</code> function is\ninvoked. <a href=\"https://doc.rust-lang.org/1.87.0/std/os/unix/process/trait.CommandExt.html#method.before_exec\">Read more</a></div></details></div></details>","CommandExt","redoxr::redoxr::Cmd"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Command\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#596\">Source</a><a href=\"#impl-Command\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#657\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.new\" class=\"fn\">new</a>&lt;S&gt;(program: S) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Command</code> for launching the program at\npath <code>program</code>, with the following default configuration:</p>\n<ul>\n<li>No arguments to the program</li>\n<li>Inherit the current processâ€™s environment</li>\n<li>Inherit the current processâ€™s working directory</li>\n<li>Inherit stdin/stdout/stderr for <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>spawn</code></a> or <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.status\" title=\"method std::process::Command::status\"><code>status</code></a>, but create pipes for <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.output\" title=\"method std::process::Command::output\"><code>output</code></a></li>\n</ul>\n<p>Builder methods are provided to change these defaults and\notherwise configure the process.</p>\n<p>If <code>program</code> is not an absolute path, the <code>PATH</code> will be searched in\nan OS-defined way.</p>\n<p>The search path to be used may be controlled by setting the\n<code>PATH</code> environment variable on the Command,\nbut this has some implementation limitations on Windows\n(see issue #37519).</p>\n<h5 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">Â§</a>Platform-specific behavior</h5>\n<p>Note on Windows: For executable files with the .exe extension,\nit can be omitted when specifying the program for this Command.\nHowever, if the file has a different extension,\na filename including the extension needs to be provided,\notherwise the file wonâ€™t be found.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"sh\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"sh command failed to start\"</span>);</code></pre></div>\n<h5 id=\"caveats\"><a class=\"doc-anchor\" href=\"#caveats\">Â§</a>Caveats</h5>\n<p><a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.new\" title=\"associated function std::process::Command::new\"><code>Command::new</code></a> is only intended to accept the path of the program. If you pass a program\npath along with arguments like <code>Command::new(\"ls -l\").spawn()</code>, it will try to search for\n<code>ls -l</code> literally. The arguments need to be passed separately, such as via <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.arg\" title=\"method std::process::Command::arg\"><code>arg</code></a> or\n<a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.args\" title=\"method std::process::Command::args\"><code>args</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .arg(<span class=\"string\">\"-l\"</span>) <span class=\"comment\">// arg passed separately\n    </span>.spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.arg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#720\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.arg\" class=\"fn\">arg</a>&lt;S&gt;(&amp;mut self, arg: S) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds an argument to pass to the program.</p>\n<p>Only one argument can be passed per use. So instead of:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>.arg(<span class=\"string\">\"-C /path/to/repo\"</span>)</code></pre></div>\n<p>usage would be:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>.arg(<span class=\"string\">\"-C\"</span>)\n.arg(<span class=\"string\">\"/path/to/repo\"</span>)</code></pre></div>\n<p>To pass multiple arguments see <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.args\" title=\"method std::process::Command::args\"><code>args</code></a>.</p>\n<p>Note that the argument is not passed through a shell, but given\nliterally to the program. This means that shell syntax like quotes,\nescaped characters, word splitting, glob patterns, variable substitution,\netc. have no effect.</p>\n<div class=\"warning\">\n<p>On Windows, use caution with untrusted inputs. Most applications use the\nstandard convention for decoding arguments passed to them. These are safe to\nuse with <code>arg</code>. However, some applications such as <code>cmd.exe</code> and <code>.bat</code> files\nuse a non-standard way of decoding arguments. They are therefore vulnerable\nto malicious input.</p>\n<p>In the case of <code>cmd.exe</code> this is especially important because a malicious\nargument can potentially run arbitrary shell commands.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.87.0/std/process/index.html#windows-argument-splitting\" title=\"mod std::process\">Windows argument splitting</a> for more details\nor <a href=\"crate::os::windows::process::CommandExt::raw_arg\"><code>raw_arg</code></a> for manually implementing non-standard argument encoding.</p>\n</div>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .arg(<span class=\"string\">\"-l\"</span>)\n    .arg(<span class=\"string\">\"-a\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.args\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#766-769\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.args\" class=\"fn\">args</a>&lt;I, S&gt;(&amp;mut self, args: I) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = S&gt;,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds multiple arguments to pass to the program.</p>\n<p>To pass a single argument see <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.arg\" title=\"method std::process::Command::arg\"><code>arg</code></a>.</p>\n<p>Note that the arguments are not passed through a shell, but given\nliterally to the program. This means that shell syntax like quotes,\nescaped characters, word splitting, glob patterns, variable substitution, etc.\nhave no effect.</p>\n<div class=\"warning\">\n<p>On Windows, use caution with untrusted inputs. Most applications use the\nstandard convention for decoding arguments passed to them. These are safe to\nuse with <code>arg</code>. However, some applications such as <code>cmd.exe</code> and <code>.bat</code> files\nuse a non-standard way of decoding arguments. They are therefore vulnerable\nto malicious input.</p>\n<p>In the case of <code>cmd.exe</code> this is especially important because a malicious\nargument can potentially run arbitrary shell commands.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.87.0/std/process/index.html#windows-argument-splitting\" title=\"mod std::process\">Windows argument splitting</a> for more details\nor <a href=\"crate::os::windows::process::CommandExt::raw_arg\"><code>raw_arg</code></a> for manually implementing non-standard argument encoding.</p>\n</div>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .args([<span class=\"string\">\"-l\"</span>, <span class=\"string\">\"-a\"</span>])\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.env\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#802-805\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.env\" class=\"fn\">env</a>&lt;K, V&gt;(&amp;mut self, key: K, val: V) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts or updates an explicit environment variable mapping.</p>\n<p>This method allows you to add an environment variable mapping to the spawned process or\noverwrite a previously set value. You can use <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a> to set multiple environment\nvariables simultaneously.</p>\n<p>Child processes will inherit environment variables from their parent process by default.\nEnvironment variables explicitly set using <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a> take precedence over inherited\nvariables. You can disable environment variable inheritance entirely using\n<a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a> or for a single key using <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a>.</p>\n<p>Note that environment variable names are case-insensitive (but\ncase-preserving) on Windows and case-sensitive on all other platforms.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .env(<span class=\"string\">\"PATH\"</span>, <span class=\"string\">\"/bin\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.envs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#846-850\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.envs\" class=\"fn\">envs</a>&lt;I, K, V&gt;(&amp;mut self, vars: I) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.tuple.html\">(K, V)</a>&gt;,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts or updates multiple explicit environment variable mappings.</p>\n<p>This method allows you to add multiple environment variable mappings to the spawned process\nor overwrite previously set values. You can use <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a> to set a single environment\nvariable.</p>\n<p>Child processes will inherit environment variables from their parent process by default.\nEnvironment variables explicitly set using <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a> take precedence over inherited\nvariables. You can disable environment variable inheritance entirely using\n<a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a> or for a single key using <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a>.</p>\n<p>Note that environment variable names are case-insensitive (but case-preserving) on Windows\nand case-sensitive on all other platforms.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n<span class=\"kw\">use </span>std::env;\n<span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>filtered_env : HashMap&lt;String, String&gt; =\n    env::vars().filter(|<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">ref </span>k, <span class=\"kw\">_</span>)|\n        k == <span class=\"string\">\"TERM\" </span>|| k == <span class=\"string\">\"TZ\" </span>|| k == <span class=\"string\">\"LANG\" </span>|| k == <span class=\"string\">\"PATH\"\n    </span>).collect();\n\nCommand::new(<span class=\"string\">\"printenv\"</span>)\n    .stdin(Stdio::null())\n    .stdout(Stdio::inherit())\n    .env_clear()\n    .envs(<span class=\"kw-2\">&amp;</span>filtered_env)\n    .spawn()\n    .expect(<span class=\"string\">\"printenv failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.env_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#886\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.env_remove\" class=\"fn\">env_remove</a>&lt;K&gt;(&amp;mut self, key: K) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes an explicitly set environment variable and prevents inheriting it from a parent\nprocess.</p>\n<p>This method will remove the explicit value of an environment variable set via\n<a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a> or <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a>. In addition, it will prevent the spawned child\nprocess from inheriting that environment variable from its parent process.</p>\n<p>After calling <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a>, the value associated with its key from\n<a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.get_envs\" title=\"method std::process::Command::get_envs\"><code>Command::get_envs</code></a> will be <a href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<p>To clear all explicitly set environment variables and disable all environment variable\ninheritance, you can use <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<p>Prevent any inherited <code>GIT_DIR</code> variable from changing the target of the <code>git</code> command,\nwhile allowing all other variables, like <code>GIT_AUTHOR_NAME</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"git\"</span>)\n    .arg(<span class=\"string\">\"commit\"</span>)\n    .env_remove(<span class=\"string\">\"GIT_DIR\"</span>)\n    .spawn()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.env_clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#918\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.env_clear\" class=\"fn\">env_clear</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Clears all explicitly set environment variables and prevents inheriting any parent process\nenvironment variables.</p>\n<p>This method will remove all explicitly added environment variables set via <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a>\nor <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a>. In addition, it will prevent the spawned child process from inheriting\nany environment variable from its parent process.</p>\n<p>After calling <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a>, the iterator from <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.get_envs\" title=\"method std::process::Command::get_envs\"><code>Command::get_envs</code></a> will be\nempty.</p>\n<p>You can use <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a> to clear a single mapping.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<p>The behavior of <code>sort</code> is affected by <code>LANG</code> and <code>LC_*</code> environment variables.\nClearing the environment makes <code>sort</code>â€˜s behavior independent of the parent processesâ€™ language.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"sort\"</span>)\n    .arg(<span class=\"string\">\"file.txt\"</span>)\n    .env_clear()\n    .spawn()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.current_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#946\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.current_dir\" class=\"fn\">current_dir</a>&lt;P&gt;(&amp;mut self, dir: P) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Sets the working directory for the child process.</p>\n<h5 id=\"platform-specific-behavior-1\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-1\">Â§</a>Platform-specific behavior</h5>\n<p>If the program path is relative (e.g., <code>\"./script.sh\"</code>), itâ€™s ambiguous\nwhether it should be interpreted relative to the parentâ€™s working\ndirectory or relative to <code>current_dir</code>. The behavior in this case is\nplatform specific and unstable, and itâ€™s recommended to use\n<a href=\"https://doc.rust-lang.org/1.87.0/std/fs/fn.canonicalize.html\" title=\"fn std::fs::canonicalize\"><code>canonicalize</code></a> to get an absolute program path instead.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .current_dir(<span class=\"string\">\"/bin\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stdin\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#973\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.stdin\" class=\"fn\">stdin</a>&lt;T&gt;(&amp;mut self, cfg: T) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configuration for the child processâ€™s standard input (stdin) handle.</p>\n<p>Defaults to <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html#method.inherit\" title=\"associated function std::process::Stdio::inherit\"><code>inherit</code></a> when used with <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>spawn</code></a> or <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.status\" title=\"method std::process::Command::status\"><code>status</code></a>, and\ndefaults to <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html#method.piped\" title=\"associated function std::process::Stdio::piped\"><code>piped</code></a> when used with <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.output\" title=\"method std::process::Command::output\"><code>output</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .stdin(Stdio::null())\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stdout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1000\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.stdout\" class=\"fn\">stdout</a>&lt;T&gt;(&amp;mut self, cfg: T) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configuration for the child processâ€™s standard output (stdout) handle.</p>\n<p>Defaults to <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html#method.inherit\" title=\"associated function std::process::Stdio::inherit\"><code>inherit</code></a> when used with <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>spawn</code></a> or <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.status\" title=\"method std::process::Command::status\"><code>status</code></a>, and\ndefaults to <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html#method.piped\" title=\"associated function std::process::Stdio::piped\"><code>piped</code></a> when used with <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.output\" title=\"method std::process::Command::output\"><code>output</code></a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .stdout(Stdio::null())\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stderr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1027\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.stderr\" class=\"fn\">stderr</a>&lt;T&gt;(&amp;mut self, cfg: T) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Configuration for the child processâ€™s standard error (stderr) handle.</p>\n<p>Defaults to <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html#method.inherit\" title=\"associated function std::process::Stdio::inherit\"><code>inherit</code></a> when used with <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>spawn</code></a> or <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.status\" title=\"method std::process::Command::status\"><code>status</code></a>, and\ndefaults to <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Stdio.html#method.piped\" title=\"associated function std::process::Stdio::piped\"><code>piped</code></a> when used with <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.output\" title=\"method std::process::Command::output\"><code>output</code></a>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .stderr(Stdio::null())\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1046\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.spawn\" class=\"fn\">spawn</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Child.html\" title=\"struct std::process::Child\">Child</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Executes the command as a child process, returning a handle to it.</p>\n<p>By default, stdin, stdout and stderr are inherited from the parent.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.output\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1075\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.output\" class=\"fn\">output</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Output.html\" title=\"struct std::process::Output\">Output</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.</p>\n<p>By default, stdout and stderr are captured (and used to provide the\nresulting output). Stdin is not inherited from the parent and any\nattempt by the child process to read from the stdin stream will result\nin the stream immediately closing.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">Â§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n<span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"/bin/cat\"</span>)\n    .arg(<span class=\"string\">\"file.txt\"</span>)\n    .output()<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"status: {}\"</span>, output.status);\nio::stdout().write_all(<span class=\"kw-2\">&amp;</span>output.stdout)<span class=\"question-mark\">?</span>;\nio::stderr().write_all(<span class=\"kw-2\">&amp;</span>output.stderr)<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert!</span>(output.status.success());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.status\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1100\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.status\" class=\"fn\">status</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\">ExitStatus</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Executes a command as a child process, waiting for it to finish and\ncollecting its status.</p>\n<p>By default, stdin, stdout and stderr are inherited from the parent.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">Â§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>status = Command::new(<span class=\"string\">\"/bin/cat\"</span>)\n    .arg(<span class=\"string\">\"file.txt\"</span>)\n    .status()\n    .expect(<span class=\"string\">\"failed to execute process\"</span>);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"process finished with: {status}\"</span>);\n\n<span class=\"macro\">assert!</span>(status.success());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_program\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1119\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.get_program\" class=\"fn\">get_program</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/ffi/os_str/struct.OsStr.html\" title=\"struct std::ffi::os_str::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\"><p>Returns the path to the program that was given to <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.new\" title=\"associated function std::process::Command::new\"><code>Command::new</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>cmd = Command::new(<span class=\"string\">\"echo\"</span>);\n<span class=\"macro\">assert_eq!</span>(cmd.get_program(), <span class=\"string\">\"echo\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_args\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1141\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.get_args\" class=\"fn\">get_args</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.CommandArgs.html\" title=\"struct std::process::CommandArgs\">CommandArgs</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator of the arguments that will be passed to the program.</p>\n<p>This does not include the path to the program as the first argument;\nit only includes the arguments specified with <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.arg\" title=\"method std::process::Command::arg\"><code>Command::arg</code></a> and\n<a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.args\" title=\"method std::process::Command::args\"><code>Command::args</code></a>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmd = Command::new(<span class=\"string\">\"echo\"</span>);\ncmd.arg(<span class=\"string\">\"first\"</span>).arg(<span class=\"string\">\"second\"</span>);\n<span class=\"kw\">let </span>args: Vec&lt;<span class=\"kw-2\">&amp;</span>OsStr&gt; = cmd.get_args().collect();\n<span class=\"macro\">assert_eq!</span>(args, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_envs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1176\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.get_envs\" class=\"fn\">get_envs</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/sys_common/process/struct.CommandEnvs.html\" title=\"struct std::sys_common::process::CommandEnvs\">CommandEnvs</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator of the environment variables explicitly set for the child process.</p>\n<p>Environment variables explicitly set using <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a>, <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a>, and\n<a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a> can be retrieved with this method.</p>\n<p>Note that this output does not include environment variables inherited from the parent\nprocess.</p>\n<p>Each element is a tuple key/value pair <code>(&amp;OsStr, Option&lt;&amp;OsStr&gt;)</code>. A <a href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value\nindicates its key was explicitly removed via <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a>. The associated key for\nthe <a href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value will no longer inherit from its parent process.</p>\n<p>An empty iterator can indicate that no explicit mappings were added or that\n<a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a> was called. After calling <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a>, the child process\nwill not inherit any environment variables from its parent process.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmd = Command::new(<span class=\"string\">\"ls\"</span>);\ncmd.env(<span class=\"string\">\"TERM\"</span>, <span class=\"string\">\"dumb\"</span>).env_remove(<span class=\"string\">\"TZ\"</span>);\n<span class=\"kw\">let </span>envs: Vec&lt;(<span class=\"kw-2\">&amp;</span>OsStr, <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>OsStr&gt;)&gt; = cmd.get_envs().collect();\n<span class=\"macro\">assert_eq!</span>(envs, <span class=\"kw-2\">&amp;</span>[\n    (OsStr::new(<span class=\"string\">\"TERM\"</span>), <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"dumb\"</span>))),\n    (OsStr::new(<span class=\"string\">\"TZ\"</span>), <span class=\"prelude-val\">None</span>)\n]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_current_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1197\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html#tymethod.get_current_dir\" class=\"fn\">get_current_dir</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the working directory for the child process.</p>\n<p>This returns <a href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the working directory will not be changed.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmd = Command::new(<span class=\"string\">\"ls\"</span>);\n<span class=\"macro\">assert_eq!</span>(cmd.get_current_dir(), <span class=\"prelude-val\">None</span>);\ncmd.current_dir(<span class=\"string\">\"/bin\"</span>);\n<span class=\"macro\">assert_eq!</span>(cmd.get_current_dir(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/bin\"</span>)));</code></pre></div>\n</div></details></div></details>",0,"redoxr::redoxr::Cmd"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Command\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1203\">Source</a></span><a href=\"#impl-Debug-for-Command\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/std/process.rs.html#1216\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.</p>\n<p>The default format approximates a shell invocation of the program along with its\narguments. It does not include most of the other command properties. The output is not guaranteed to work\n(e.g. due to lack of shell-escaping or differences in path resolution).\nOn some platforms you can use <a href=\"https://doc.rust-lang.org/1.87.0/alloc/fmt/index.html#sign0\" title=\"mod alloc::fmt\">the alternate syntax</a> to show more fields.</p>\n<p>Note that the debug implementation is platform-specific.</p>\n</div></details></div></details>","Debug","redoxr::redoxr::Cmd"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[64599]}